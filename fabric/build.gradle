plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation(include "maven.modrinth:unruled-api:${project.unruled_fabric_version}")

    modCompileOnly "dev.emi:trinkets:${project.trinkets_version}"
    modCompileOnly "maven.modrinth:travelersbackpack:${project.travelersbackpack_fabric_version}"
    modCompileOnly "maven.modrinth:not-enough-animations:${project.notenoughanimations_fabric_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:0.91.0+1.20.1"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand inputs.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}
sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + '-' + project.name
            from components.java
        }
    }
    repositories {
    }
}